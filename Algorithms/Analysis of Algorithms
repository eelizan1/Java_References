When analysing an algorithm, what should we worry on?
- How much space? - Space complexity
- How much time? - ** Time complexity **
We worry about the time complexity since storage and space has become so cheap
***********************************************************************************
Time Complexity

    When we study the time complexity, we want to understand how the time of an algorithm varies
    with the size of the input data - we want to know the order of growth of an algorithm with the size
    of an input data.

    Example:
    100 items = 10ms to sort
    Items       Algorithm 1(ms)     Algorithm 2(ms)
    ------------------------------------------------
    200         20                  40
    1000        100                 1000
    10000       1000                100000

    * Order of time or Growth of time

    Algorithm 1 has a linear growth of time
    Algorithm 2 has a quadratic growth of time

    Algo 1 is better than Algo 2

*************************************************************************************
Types of Time Complexity

1. Worst Case - What we worry about
2. Best Case - Don't care
3. Average Case - Complex

RAM Model of Computation
    Assume:
    We have infinite memory
    Each operation takes 1 unit of time
    For each memory access takes one of unit of time
    Dont care where the data is read from
    Data is stored in the RAM
*************************************************************************************
Complexity of the Bubble Sort Algorithm

Array [12, 8, 7, 5, 2]

First Iteration
    Comparison | Swaps
    ---------------------
    12, 8       3 - three memory access steps (12, 8, temporary bin)
    12, 7       3
    12, 5       3
    12, 2       3

    = 16 steps
Array [8, 7, 5, 2, 12]

Second Iteration
    Comparison | Swaps
    ------------------
    8, 7        3
    8, 5        3
    8, 2        3

    = 12 steps
Array [7, 5, 2, 8, 12]

Third Iteration
    Comparison | Swaps
    ------------------
    7, 5        3
    7, 2        3

    = 8 steps
Array [5, 2, 7, 8, 12]

Fourth Iteration
    Comparison | Swaps
    ------------------
    5, 2        3

    = 4 steps
Array [2, 5, 7, 8, 12]

Total Steps = 40 steps for 5 elements for WORST CASE

16 + 12 + 8 + 4 for 5 elements
= 4(4 + 3 + 8 + 1) // 4 is the GCD

for n elements:
= 4(n - 1 + n - 2 + ... + 3 + 2 + 1)
= 2 * n * (n-1)
 Which is a quadratic formual in n
 therfore can be written as:

 pn^2 + qn + r; where p and q are some constants


